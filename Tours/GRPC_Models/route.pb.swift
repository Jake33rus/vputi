// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: route.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Adventure_Net_Controller_Transport: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case pedestrian // = 0
  case car // = 1
  case bus // = 2
  case bicycle // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .pedestrian
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .pedestrian
    case 1: self = .car
    case 2: self = .bus
    case 3: self = .bicycle
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .pedestrian: return 0
    case .car: return 1
    case .bus: return 2
    case .bicycle: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Adventure_Net_Controller_Transport: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Adventure_Net_Controller_Transport] = [
    .pedestrian,
    .car,
    .bus,
    .bicycle,
  ]
}

#endif  // swift(>=4.2)

struct Adventure_Net_Controller_PointLocation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var longitude: Float = 0

  var latitude: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Adventure_Net_Controller_GetRoutesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var from: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _from ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_from = newValue}
  }
  /// Returns true if `from` has been explicitly set.
  var hasFrom: Bool {return self._from != nil}
  /// Clears the value of `from`. Subsequent reads from it will return its default value.
  mutating func clearFrom() {self._from = nil}

  var to: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _to ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_to = newValue}
  }
  /// Returns true if `to` has been explicitly set.
  var hasTo: Bool {return self._to != nil}
  /// Clears the value of `to`. Subsequent reads from it will return its default value.
  mutating func clearTo() {self._to = nil}

  var fromLocation: Adventure_Net_Controller_PointLocation {
    get {return _fromLocation ?? Adventure_Net_Controller_PointLocation()}
    set {_fromLocation = newValue}
  }
  /// Returns true if `fromLocation` has been explicitly set.
  var hasFromLocation: Bool {return self._fromLocation != nil}
  /// Clears the value of `fromLocation`. Subsequent reads from it will return its default value.
  mutating func clearFromLocation() {self._fromLocation = nil}

  var toLocation: Adventure_Net_Controller_PointLocation {
    get {return _toLocation ?? Adventure_Net_Controller_PointLocation()}
    set {_toLocation = newValue}
  }
  /// Returns true if `toLocation` has been explicitly set.
  var hasToLocation: Bool {return self._toLocation != nil}
  /// Clears the value of `toLocation`. Subsequent reads from it will return its default value.
  mutating func clearToLocation() {self._toLocation = nil}

  var preferTransport: [Adventure_Net_Controller_Transport] = []

  var pointCount: Int32 = 0

  var eatCount: Int32 = 0

  var money: Float = 0

  var interests: [Int32] = []

  var useHotel: Bool = false

  var cityID: Int64 = 0

  var constraints: Adventure_Net_Controller_GetRoutesRequest.Constraints {
    get {return _constraints ?? Adventure_Net_Controller_GetRoutesRequest.Constraints()}
    set {_constraints = newValue}
  }
  /// Returns true if `constraints` has been explicitly set.
  var hasConstraints: Bool {return self._constraints != nil}
  /// Clears the value of `constraints`. Subsequent reads from it will return its default value.
  mutating func clearConstraints() {self._constraints = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Constraints {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var points: [Adventure_Net_Controller_GetRoutesRequest.Constraints.PointInfo] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct PointInfo {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var id: Int64 = 0

      var from: SwiftProtobuf.Google_Protobuf_Timestamp {
        get {return _from ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
        set {_from = newValue}
      }
      /// Returns true if `from` has been explicitly set.
      var hasFrom: Bool {return self._from != nil}
      /// Clears the value of `from`. Subsequent reads from it will return its default value.
      mutating func clearFrom() {self._from = nil}

      var to: SwiftProtobuf.Google_Protobuf_Timestamp {
        get {return _to ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
        set {_to = newValue}
      }
      /// Returns true if `to` has been explicitly set.
      var hasTo: Bool {return self._to != nil}
      /// Clears the value of `to`. Subsequent reads from it will return its default value.
      mutating func clearTo() {self._to = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _from: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
      fileprivate var _to: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    }

    init() {}
  }

  init() {}

  fileprivate var _from: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _to: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _fromLocation: Adventure_Net_Controller_PointLocation? = nil
  fileprivate var _toLocation: Adventure_Net_Controller_PointLocation? = nil
  fileprivate var _constraints: Adventure_Net_Controller_GetRoutesRequest.Constraints? = nil
}

struct Adventure_Net_Controller_GetRoutesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var start: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _start ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_start = newValue}
  }
  /// Returns true if `start` has been explicitly set.
  var hasStart: Bool {return self._start != nil}
  /// Clears the value of `start`. Subsequent reads from it will return its default value.
  mutating func clearStart() {self._start = nil}

  var end: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _end ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_end = newValue}
  }
  /// Returns true if `end` has been explicitly set.
  var hasEnd: Bool {return self._end != nil}
  /// Clears the value of `end`. Subsequent reads from it will return its default value.
  mutating func clearEnd() {self._end = nil}

  var totalPrice: Float = 0

  var points: [Adventure_Net_Controller_GetRoutesResponse.Point] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Point {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var pointType: Adventure_Net_Controller_GetRoutesResponse.Point.PointType = .event

    var name: String = String()

    var description_p: String = String()

    var enter: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _enter ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_enter = newValue}
    }
    /// Returns true if `enter` has been explicitly set.
    var hasEnter: Bool {return self._enter != nil}
    /// Clears the value of `enter`. Subsequent reads from it will return its default value.
    mutating func clearEnter() {self._enter = nil}

    var exit: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _exit ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_exit = newValue}
    }
    /// Returns true if `exit` has been explicitly set.
    var hasExit: Bool {return self._exit != nil}
    /// Clears the value of `exit`. Subsequent reads from it will return its default value.
    mutating func clearExit() {self._exit = nil}

    var price: Float = 0

    var location: Adventure_Net_Controller_PointLocation {
      get {return _location ?? Adventure_Net_Controller_PointLocation()}
      set {_location = newValue}
    }
    /// Returns true if `location` has been explicitly set.
    var hasLocation: Bool {return self._location != nil}
    /// Clears the value of `location`. Subsequent reads from it will return its default value.
    mutating func clearLocation() {self._location = nil}

    var transportType: Adventure_Net_Controller_Transport = .pedestrian

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum PointType: SwiftProtobuf.Enum {
      typealias RawValue = Int
      case event // = 0
      case eat // = 1
      case hotel // = 2
      case routePoint // = 3
      case UNRECOGNIZED(Int)

      init() {
        self = .event
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .event
        case 1: self = .eat
        case 2: self = .hotel
        case 3: self = .routePoint
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .event: return 0
        case .eat: return 1
        case .hotel: return 2
        case .routePoint: return 3
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    init() {}

    fileprivate var _enter: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    fileprivate var _exit: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    fileprivate var _location: Adventure_Net_Controller_PointLocation? = nil
  }

  init() {}

  fileprivate var _start: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _end: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=4.2)

extension Adventure_Net_Controller_GetRoutesResponse.Point.PointType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Adventure_Net_Controller_GetRoutesResponse.Point.PointType] = [
    .event,
    .eat,
    .hotel,
    .routePoint,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "adventure.net.controller"

extension Adventure_Net_Controller_Transport: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PEDESTRIAN"),
    1: .same(proto: "CAR"),
    2: .same(proto: "BUS"),
    3: .same(proto: "BICYCLE"),
  ]
}

extension Adventure_Net_Controller_PointLocation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PointLocation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "longitude"),
    2: .same(proto: "latitude"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.longitude) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.latitude) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.longitude != 0 {
      try visitor.visitSingularFloatField(value: self.longitude, fieldNumber: 1)
    }
    if self.latitude != 0 {
      try visitor.visitSingularFloatField(value: self.latitude, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Adventure_Net_Controller_PointLocation, rhs: Adventure_Net_Controller_PointLocation) -> Bool {
    if lhs.longitude != rhs.longitude {return false}
    if lhs.latitude != rhs.latitude {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Adventure_Net_Controller_GetRoutesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetRoutesRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .same(proto: "to"),
    3: .same(proto: "fromLocation"),
    4: .same(proto: "toLocation"),
    5: .standard(proto: "prefer_transport"),
    6: .standard(proto: "point_count"),
    7: .standard(proto: "eat_count"),
    8: .same(proto: "money"),
    9: .same(proto: "interests"),
    10: .standard(proto: "use_hotel"),
    11: .standard(proto: "city_id"),
    12: .same(proto: "constraints"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._from) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._to) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._fromLocation) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._toLocation) }()
      case 5: try { try decoder.decodeRepeatedEnumField(value: &self.preferTransport) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.pointCount) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.eatCount) }()
      case 8: try { try decoder.decodeSingularFloatField(value: &self.money) }()
      case 9: try { try decoder.decodeRepeatedInt32Field(value: &self.interests) }()
      case 10: try { try decoder.decodeSingularBoolField(value: &self.useHotel) }()
      case 11: try { try decoder.decodeSingularInt64Field(value: &self.cityID) }()
      case 12: try { try decoder.decodeSingularMessageField(value: &self._constraints) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._from {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._to {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._fromLocation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._toLocation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.preferTransport.isEmpty {
      try visitor.visitPackedEnumField(value: self.preferTransport, fieldNumber: 5)
    }
    if self.pointCount != 0 {
      try visitor.visitSingularInt32Field(value: self.pointCount, fieldNumber: 6)
    }
    if self.eatCount != 0 {
      try visitor.visitSingularInt32Field(value: self.eatCount, fieldNumber: 7)
    }
    if self.money != 0 {
      try visitor.visitSingularFloatField(value: self.money, fieldNumber: 8)
    }
    if !self.interests.isEmpty {
      try visitor.visitPackedInt32Field(value: self.interests, fieldNumber: 9)
    }
    if self.useHotel != false {
      try visitor.visitSingularBoolField(value: self.useHotel, fieldNumber: 10)
    }
    if self.cityID != 0 {
      try visitor.visitSingularInt64Field(value: self.cityID, fieldNumber: 11)
    }
    try { if let v = self._constraints {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Adventure_Net_Controller_GetRoutesRequest, rhs: Adventure_Net_Controller_GetRoutesRequest) -> Bool {
    if lhs._from != rhs._from {return false}
    if lhs._to != rhs._to {return false}
    if lhs._fromLocation != rhs._fromLocation {return false}
    if lhs._toLocation != rhs._toLocation {return false}
    if lhs.preferTransport != rhs.preferTransport {return false}
    if lhs.pointCount != rhs.pointCount {return false}
    if lhs.eatCount != rhs.eatCount {return false}
    if lhs.money != rhs.money {return false}
    if lhs.interests != rhs.interests {return false}
    if lhs.useHotel != rhs.useHotel {return false}
    if lhs.cityID != rhs.cityID {return false}
    if lhs._constraints != rhs._constraints {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Adventure_Net_Controller_GetRoutesRequest.Constraints: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Adventure_Net_Controller_GetRoutesRequest.protoMessageName + ".Constraints"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "points"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.points) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.points.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.points, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Adventure_Net_Controller_GetRoutesRequest.Constraints, rhs: Adventure_Net_Controller_GetRoutesRequest.Constraints) -> Bool {
    if lhs.points != rhs.points {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Adventure_Net_Controller_GetRoutesRequest.Constraints.PointInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Adventure_Net_Controller_GetRoutesRequest.Constraints.protoMessageName + ".PointInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "from"),
    3: .same(proto: "to"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._from) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._to) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._from {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._to {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Adventure_Net_Controller_GetRoutesRequest.Constraints.PointInfo, rhs: Adventure_Net_Controller_GetRoutesRequest.Constraints.PointInfo) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._from != rhs._from {return false}
    if lhs._to != rhs._to {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Adventure_Net_Controller_GetRoutesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetRoutesResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "start"),
    2: .same(proto: "end"),
    3: .standard(proto: "total_price"),
    4: .same(proto: "points"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._start) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._end) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.totalPrice) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.points) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._start {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._end {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.totalPrice != 0 {
      try visitor.visitSingularFloatField(value: self.totalPrice, fieldNumber: 3)
    }
    if !self.points.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.points, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Adventure_Net_Controller_GetRoutesResponse, rhs: Adventure_Net_Controller_GetRoutesResponse) -> Bool {
    if lhs._start != rhs._start {return false}
    if lhs._end != rhs._end {return false}
    if lhs.totalPrice != rhs.totalPrice {return false}
    if lhs.points != rhs.points {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Adventure_Net_Controller_GetRoutesResponse.Point: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Adventure_Net_Controller_GetRoutesResponse.protoMessageName + ".Point"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "point_type"),
    2: .same(proto: "name"),
    3: .same(proto: "description"),
    4: .same(proto: "enter"),
    5: .same(proto: "exit"),
    6: .same(proto: "price"),
    7: .same(proto: "location"),
    8: .standard(proto: "transport_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.pointType) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._enter) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._exit) }()
      case 6: try { try decoder.decodeSingularFloatField(value: &self.price) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._location) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.transportType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.pointType != .event {
      try visitor.visitSingularEnumField(value: self.pointType, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    try { if let v = self._enter {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._exit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if self.price != 0 {
      try visitor.visitSingularFloatField(value: self.price, fieldNumber: 6)
    }
    try { if let v = self._location {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    if self.transportType != .pedestrian {
      try visitor.visitSingularEnumField(value: self.transportType, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Adventure_Net_Controller_GetRoutesResponse.Point, rhs: Adventure_Net_Controller_GetRoutesResponse.Point) -> Bool {
    if lhs.pointType != rhs.pointType {return false}
    if lhs.name != rhs.name {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs._enter != rhs._enter {return false}
    if lhs._exit != rhs._exit {return false}
    if lhs.price != rhs.price {return false}
    if lhs._location != rhs._location {return false}
    if lhs.transportType != rhs.transportType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Adventure_Net_Controller_GetRoutesResponse.Point.PointType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "EVENT"),
    1: .same(proto: "EAT"),
    2: .same(proto: "HOTEL"),
    3: .same(proto: "ROUTE_POINT"),
  ]
}
