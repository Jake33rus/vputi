//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: route.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Adventure_Net_Controller_RouteServiceClient`, then call methods of this protocol to make API calls.
internal protocol Adventure_Net_Controller_RouteServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Adventure_Net_Controller_RouteServiceClientInterceptorFactoryProtocol? { get }

  func getRoutes(
    _ request: Adventure_Net_Controller_GetRoutesRequest,
    callOptions: CallOptions?,
    handler: @escaping (Adventure_Net_Controller_GetRoutesResponse) -> Void
  ) -> ServerStreamingCall<Adventure_Net_Controller_GetRoutesRequest, Adventure_Net_Controller_GetRoutesResponse>
}

extension Adventure_Net_Controller_RouteServiceClientProtocol {
  internal var serviceName: String {
    return "adventure.net.controller.RouteService"
  }

  /// Server streaming call to GetRoutes
  ///
  /// - Parameters:
  ///   - request: Request to send to GetRoutes.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getRoutes(
    _ request: Adventure_Net_Controller_GetRoutesRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Adventure_Net_Controller_GetRoutesResponse) -> Void
  ) -> ServerStreamingCall<Adventure_Net_Controller_GetRoutesRequest, Adventure_Net_Controller_GetRoutesResponse> {
    return self.makeServerStreamingCall(
      path: "/adventure.net.controller.RouteService/GetRoutes",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetRoutesInterceptors() ?? [],
      handler: handler
    )
  }
}

internal protocol Adventure_Net_Controller_RouteServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getRoutes'.
  func makeGetRoutesInterceptors() -> [ClientInterceptor<Adventure_Net_Controller_GetRoutesRequest, Adventure_Net_Controller_GetRoutesResponse>]
}

internal final class Adventure_Net_Controller_RouteServiceClient: Adventure_Net_Controller_RouteServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Adventure_Net_Controller_RouteServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the adventure.net.controller.RouteService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Adventure_Net_Controller_RouteServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

